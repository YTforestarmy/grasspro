import asyncio
import random
import ssl
import json
import time
import uuid
import websockets
import base64
import shutil
from datetime import datetime
from loguru import logger
from fake_useragent import UserAgent
from colorama import Fore, Style, init

# Initialize colorama for colored text
init(autoreset=True)

user_agent = UserAgent(os='windows', platforms='pc', browsers='chrome')
random_user_agent = user_agent.random

ENCODED_SECRET = base64.b64encode(b"HBD-ANGEL").decode('utf-8')
ENCODED_DATE = base64.b64encode(b"2025-01-01").decode('utf-8')

colors = [Fore.RED, Fore.GREEN, Fore.YELLOW, Fore.BLUE, Fore.MAGENTA, Fore.CYAN, Fore.WHITE]

def display_forest_army():
    while True:
        color = random.choice(colors)
        terminal_width = shutil.get_terminal_size().columns
        centered_text = "[ TELEGRAM- @ForestArmy ] [YOUTUBE- @FORESTARMY ]".center(terminal_width)
        print(color + centered_text + Style.RESET_ALL)
        time.sleep(0.5)

def validate_access():
    secret_code = base64.b64decode(ENCODED_SECRET).decode('utf-8')
    expiry_date = datetime.strptime(base64.b64decode(ENCODED_DATE).decode('utf-8'), "%Y-%m-%d")
    

    if datetime.now() > expiry_date:
        display_forest_army()

 
    code = input("Please enter the secret code to continue: ")
    if code != secret_code:
        display_forest_army()

async def connect_to_wss(user_id):
    device_id = str(uuid.uuid4())
    logger.info(device_id)
    while True:
        try:
            await asyncio.sleep(random.randint(1, 10) / 10)
            custom_headers = {
                "User-Agent": random_user_agent,
            }
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            urilist = ["wss://proxy.wynd.network:4444/", "wss://proxy.wynd.network:4650/"]
            uri = random.choice(urilist)
            server_hostname = "proxy.wynd.network"
            async with websockets.connect(uri, ssl=ssl_context, extra_headers=custom_headers,
                                          server_hostname=server_hostname) as websocket:
                async def send_CONNECTED():
                    while True:
                        send_message = json.dumps(
                            {"id": str(uuid.uuid4()), "version": "1.0.0", "action": "CONNECTED", "data": {}})
                        logger.debug(send_message)
                        await websocket.send(send_message)
                        await asyncio.sleep(5)

                await asyncio.sleep(1)
                asyncio.create_task(send_CONNECTED())

                while True:
                    response = await websocket.recv()
                    message = json.loads(response)
                    logger.info(message)
                    if message.get("action") == "AUTH":
                        auth_response = {
                            "id": message["id"],
                            "origin_action": "AUTH",
                            "result": {
                                "browser_id": device_id,
                                "user_id": user_id,
                                "user_agent": custom_headers['User-Agent'],
                                "timestamp": int(time.time()),
                                "device_type": "desktop",
                                "version": "4.28.1",
                            }
                        }
                        logger.debug(auth_response)
                        await websocket.send(json.dumps(auth_response))

                    elif message.get("action") == "SUCCESS":
                        SUCCESS_response = {"id": message["id"], "origin_action": "SUCCESS"}
                        logger.debug(SUCCESS_response)
                        await websocket.send(json.dumps(SUCCESS_response))
        except Exception as e:
            logger.error(e)

async def main():
    # Validate access before proceeding
    validate_access()
    # Prompt user for ID
    _user_id = input('Please Enter your GRASS TOKEN : ')
    await connect_to_wss(_user_id)

if __name__ == '__main__':
    asyncio.run(main())
